{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Array Typing","text":""},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>API Reference</li> </ul>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>array_typing     * array_typing.array_like     * array_typing.jax     * array_typing.numpy         * array_typing.numpy._utils     * array_typing.python     * array_typing.torch     * array_typing.typing     * array_typing.utils</li> </ul>"},{"location":"api/array_typing/","title":"array_typing","text":"<p>Modules:</p> <ul> <li> <code>array_like</code>           \u2013            </li> <li> <code>jax</code>           \u2013            </li> <li> <code>numpy</code>           \u2013            </li> <li> <code>python</code>           \u2013            </li> <li> <code>torch</code>           \u2013            </li> <li> <code>typing</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>as_scalar</code>             \u2013              </li> <li> <code>flatten</code>             \u2013              </li> <li> <code>full_name</code>             \u2013              <p>Returns the fully qualified name of the given object.</p> </li> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_class_named</code>             \u2013              </li> <li> <code>is_class_named_partial</code>             \u2013              </li> <li> <code>is_instance_named</code>             \u2013              </li> <li> <code>is_instance_named_partial</code>             \u2013              </li> <li> <code>is_iterable</code>             \u2013              </li> <li> <code>is_jax</code>             \u2013              </li> <li> <code>is_named</code>             \u2013              </li> <li> <code>is_named_partial</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>is_sequence</code>             \u2013              </li> <li> <code>is_subsequence</code>             \u2013              </li> <li> <code>is_torch</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>           \u2013            </li> <li> <code>Scalar</code>           \u2013            </li> <li> <code>ScalarLike</code>           \u2013            </li> </ul>"},{"location":"api/array_typing/#array_typing.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike\n</code></pre>"},{"location":"api/array_typing/#array_typing.Scalar","title":"Scalar  <code>module-attribute</code>","text":"<pre><code>Scalar = int | float | complex\n</code></pre>"},{"location":"api/array_typing/#array_typing.ScalarLike","title":"ScalarLike  <code>module-attribute</code>","text":"<pre><code>ScalarLike = ScalarLike\n</code></pre>"},{"location":"api/array_typing/#array_typing.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(\n    obj: Mapping[str, ArrayLike] | None\n) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, at.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: at.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/array_typing/#array_typing.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if at.is_numpy(obj):\n        return obj\n    if at.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/array_typing/#array_typing.as_scalar","title":"as_scalar","text":"<pre><code>as_scalar(x: ScalarLike) -&gt; Scalar\n</code></pre> Source code in <code>src/array_typing/python/_cast.py</code> <pre><code>def as_scalar(x: at.ScalarLike) -&gt; at.Scalar:\n    if at.is_jax(x):\n        return x.item()\n    if at.is_numpy(x):\n        return x.item()\n    if at.is_torch(x):\n        return x.item()\n    return x  # pyright: ignore [reportReturnType]\n</code></pre>"},{"location":"api/array_typing/#array_typing.flatten","title":"flatten","text":"<pre><code>flatten(\n    iterable: (\n        _T\n        | Iterable[_T]\n        | Iterable[Iterable[_T]]\n        | Iterable\n    ),\n    base_type: tuple[type, ...] = (str, bytes),\n) -&gt; Iterable[_T]\n</code></pre> Source code in <code>src/array_typing/utils/_sequence.py</code> <pre><code>def flatten(\n    iterable: _T | Iterable[_T] | Iterable[Iterable[_T]] | Iterable,\n    base_type: tuple[type, ...] = (str, bytes),\n) -&gt; Iterable[_T]:\n    if not at.is_iterable(iterable, base_type):\n        yield iterable  # pyright: ignore [reportReturnType]\n        return\n\n    for item in iterable:\n        if at.is_iterable(item, base_type):\n            yield from flatten(item)\n        else:\n            yield item\n</code></pre>"},{"location":"api/array_typing/#array_typing.full_name","title":"full_name","text":"<pre><code>full_name(obj: Any) -&gt; str\n</code></pre> <p>Returns the fully qualified name of the given object.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>The object whose fully qualified name is to be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The fully qualified name of the object.</p> </li> </ul> Reference <ol> <li>https://stackoverflow.com/a/2020083/18410348</li> </ol> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def full_name(obj: Any) -&gt; str:\n    \"\"\"Returns the fully qualified name of the given object.\n\n    Args:\n        obj: The object whose fully qualified name is to be returned.\n\n    Returns:\n        The fully qualified name of the object.\n\n    Reference:\n        1. &lt;https://stackoverflow.com/a/2020083/18410348&gt;\n    \"\"\"\n    if not isinstance(obj, type):\n        return full_name(type(obj))\n    clazz: type = obj\n    module: str = clazz.__module__\n    if module == \"builtins\":\n        return clazz.__qualname__\n    return clazz.__module__ + \".\" + clazz.__qualname__\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_class_named","title":"is_class_named","text":"<pre><code>is_class_named(\n    cls: type, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_class_named(cls: type, name: str | Sequence[str]) -&gt; bool:\n    return any((full_name(cls) in at.flatten(name)) for cls in cls.__mro__)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_class_named_partial","title":"is_class_named_partial","text":"<pre><code>is_class_named_partial(\n    cls: type, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_class_named_partial(cls: type, name: str | Sequence[str]) -&gt; bool:\n    for clazz in cls.__mro__:\n        class_parts: list[str] = full_name(clazz).split(\".\")\n        for n in at.flatten(name):\n            name_parts: list[str] = n.split(\".\")\n            if at.is_subsequence(name_parts, class_parts):\n                return True\n    return False\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_instance_named","title":"is_instance_named","text":"<pre><code>is_instance_named(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_instance_named(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    return is_class_named(type(obj), name)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_instance_named_partial","title":"is_instance_named_partial","text":"<pre><code>is_instance_named_partial(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_instance_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    return is_class_named_partial(type(obj), name)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_iterable","title":"is_iterable","text":"<pre><code>is_iterable(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Iterable]\n</code></pre> Source code in <code>src/array_typing/typing/_is.py</code> <pre><code>def is_iterable(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Iterable]:\n    return isinstance(obj, Iterable) and not isinstance(obj, base_type)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_jax","title":"is_jax","text":"<pre><code>is_jax(obj: Any) -&gt; TypeGuard[Array]\n</code></pre> Source code in <code>src/array_typing/jax/_utils.py</code> <pre><code>def is_jax(obj: Any) -&gt; TypeGuard[jax.Array]:\n    return at.is_instance_named_partial(obj, \"jax.Array\")\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_named","title":"is_named","text":"<pre><code>is_named(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_named(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    if isinstance(obj, type):\n        return is_class_named(obj, name)\n    return is_instance_named(obj, name)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_named_partial","title":"is_named_partial","text":"<pre><code>is_named_partial(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    if isinstance(obj, type):\n        return is_class_named_partial(obj, name)\n    return is_instance_named_partial(obj, name)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return at.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_sequence","title":"is_sequence","text":"<pre><code>is_sequence(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Sequence]\n</code></pre> Source code in <code>src/array_typing/typing/_is.py</code> <pre><code>def is_sequence(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Sequence]:\n    return isinstance(obj, Sequence) and not isinstance(obj, base_type)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_subsequence","title":"is_subsequence","text":"<pre><code>is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/utils/_sequence.py</code> <pre><code>def is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool:\n    i: int = 0\n    j: int = 0\n    while i &lt; len(a) and j &lt; len(b):\n        if a[i] == b[j]:\n            i += 1\n        j += 1\n    return i == len(a)\n</code></pre>"},{"location":"api/array_typing/#array_typing.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre> Source code in <code>src/array_typing/torch/_utils.py</code> <pre><code>def is_torch(obj: Any) -&gt; TypeGuard[torch.Tensor]:\n    return at.is_instance_named_partial(obj, \"torch.Tensor\")\n</code></pre>"},{"location":"api/array_typing/array_like/","title":"array_typing.array_like","text":"<p>Functions:</p> <ul> <li> <code>is_array_like</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> <li> <code>Scalar</code>           \u2013            </li> <li> <code>ScalarLike</code>           \u2013            </li> </ul>"},{"location":"api/array_typing/array_like/#array_typing.array_like.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.Scalar","title":"Scalar  <code>module-attribute</code>","text":"<pre><code>Scalar = int | float | complex\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.ScalarLike","title":"ScalarLike  <code>module-attribute</code>","text":"<pre><code>ScalarLike = ScalarLike\n</code></pre>"},{"location":"api/array_typing/array_like/#array_typing.array_like.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/array_typing/jax/","title":"array_typing.jax","text":"<p>Functions:</p> <ul> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_jax</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>           \u2013            </li> <li> <code>B</code>           \u2013            </li> <li> <code>B33</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMN</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN</code>           \u2013            </li> <li> <code>BN3</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNN</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F</code>           \u2013            </li> <li> <code>F33</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMN</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN</code>           \u2013            </li> <li> <code>FN3</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNN</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I</code>           \u2013            </li> <li> <code>I33</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMN</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN</code>           \u2013            </li> <li> <code>IN3</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INN</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/array_typing/jax/#array_typing.jax.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[Array, '']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B33","title":"B33  <code>module-attribute</code>","text":"<pre><code>B33 = Bool[Array, '3 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B34","title":"B34  <code>module-attribute</code>","text":"<pre><code>B34 = Bool[Array, '3 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B43","title":"B43  <code>module-attribute</code>","text":"<pre><code>B43 = Bool[Array, '4 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B44","title":"B44  <code>module-attribute</code>","text":"<pre><code>B44 = Bool[Array, '4 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BMN","title":"BMN  <code>module-attribute</code>","text":"<pre><code>BMN = Bool[Array, 'M N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[Array, 'N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BN3","title":"BN3  <code>module-attribute</code>","text":"<pre><code>BN3 = Bool[Array, 'N 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BN4","title":"BN4  <code>module-attribute</code>","text":"<pre><code>BN4 = Bool[Array, 'N 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BNN","title":"BNN  <code>module-attribute</code>","text":"<pre><code>BNN = Bool[Array, 'N N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[Array, '']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[Array, '3 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[Array, '3 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[Array, '4 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[Array, '4 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[Array, 'M N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[Array, 'N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[Array, 'N 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FN4","title":"FN4  <code>module-attribute</code>","text":"<pre><code>FN4 = Float[Array, 'N 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[Array, 'N N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[Array, '']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I33","title":"I33  <code>module-attribute</code>","text":"<pre><code>I33 = Integer[Array, '3 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I34","title":"I34  <code>module-attribute</code>","text":"<pre><code>I34 = Integer[Array, '3 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I43","title":"I43  <code>module-attribute</code>","text":"<pre><code>I43 = Integer[Array, '4 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I44","title":"I44  <code>module-attribute</code>","text":"<pre><code>I44 = Integer[Array, '4 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IMN","title":"IMN  <code>module-attribute</code>","text":"<pre><code>IMN = Integer[Array, 'M N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[Array, 'N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[Array, 'N 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[Array, 'N 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.INN","title":"INN  <code>module-attribute</code>","text":"<pre><code>INN = Integer[Array, 'N N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/array_typing/jax/#array_typing.jax.is_jax","title":"is_jax","text":"<pre><code>is_jax(obj: Any) -&gt; TypeGuard[Array]\n</code></pre> Source code in <code>src/array_typing/jax/_utils.py</code> <pre><code>def is_jax(obj: Any) -&gt; TypeGuard[jax.Array]:\n    return at.is_instance_named_partial(obj, \"jax.Array\")\n</code></pre>"},{"location":"api/array_typing/numpy/","title":"array_typing.numpy","text":"<p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_dtype</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>scale</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>           \u2013            </li> <li> <code>B</code>           \u2013            </li> <li> <code>B33</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMN</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN</code>           \u2013            </li> <li> <code>BN3</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNN</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F</code>           \u2013            </li> <li> <code>F33</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMN</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN</code>           \u2013            </li> <li> <code>FN3</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNN</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I</code>           \u2013            </li> <li> <code>I33</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMN</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN</code>           \u2013            </li> <li> <code>IN3</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INN</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/array_typing/numpy/#array_typing.numpy.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[ndarray, '']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B33","title":"B33  <code>module-attribute</code>","text":"<pre><code>B33 = Bool[ndarray, '3 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B34","title":"B34  <code>module-attribute</code>","text":"<pre><code>B34 = Bool[ndarray, '3 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B43","title":"B43  <code>module-attribute</code>","text":"<pre><code>B43 = Bool[ndarray, '4 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B44","title":"B44  <code>module-attribute</code>","text":"<pre><code>B44 = Bool[ndarray, '4 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BMN","title":"BMN  <code>module-attribute</code>","text":"<pre><code>BMN = Bool[ndarray, 'M N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[ndarray, 'N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BN3","title":"BN3  <code>module-attribute</code>","text":"<pre><code>BN3 = Bool[ndarray, 'N 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BN4","title":"BN4  <code>module-attribute</code>","text":"<pre><code>BN4 = Bool[ndarray, 'N 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BNN","title":"BNN  <code>module-attribute</code>","text":"<pre><code>BNN = Bool[ndarray, 'N N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[ndarray, '']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[ndarray, '3 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[ndarray, '3 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[ndarray, '4 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[ndarray, '4 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[ndarray, 'M N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[ndarray, 'N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[ndarray, 'N 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FN4","title":"FN4  <code>module-attribute</code>","text":"<pre><code>FN4 = Float[ndarray, 'N 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[ndarray, 'N N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[ndarray, '']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I33","title":"I33  <code>module-attribute</code>","text":"<pre><code>I33 = Integer[ndarray, '3 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I34","title":"I34  <code>module-attribute</code>","text":"<pre><code>I34 = Integer[ndarray, '3 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I43","title":"I43  <code>module-attribute</code>","text":"<pre><code>I43 = Integer[ndarray, '4 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I44","title":"I44  <code>module-attribute</code>","text":"<pre><code>I44 = Integer[ndarray, '4 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IMN","title":"IMN  <code>module-attribute</code>","text":"<pre><code>IMN = Integer[ndarray, 'M N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[ndarray, 'N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[ndarray, 'N 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[ndarray, 'N 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.INN","title":"INN  <code>module-attribute</code>","text":"<pre><code>INN = Integer[ndarray, 'N N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(\n    obj: Mapping[str, ArrayLike] | None\n) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, at.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: at.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.as_dtype","title":"as_dtype","text":"<pre><code>as_dtype(x: ArrayLike, dtype: DTypeLike) -&gt; NDArray[...]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_dtype.py</code> <pre><code>def as_dtype(x: npt.ArrayLike, dtype: npt.DTypeLike) -&gt; npt.NDArray[...]:\n    x: npt.NDArray = tn.as_numpy(x)\n    dtype: np.dtype = np.dtype(dtype)\n    if np.issubdtype(x.dtype, dtype):\n        return x\n    if np.isdtype(dtype, \"bool\"):\n        if np.ptp(x) &gt; 0:\n            return x &gt; np.median(x)\n        return x &gt; 0.5\n    if np.isdtype(dtype, \"integral\"):\n        x = np.rint(x)\n    return x.astype(dtype)\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if at.is_numpy(obj):\n        return obj\n    if at.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return at.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/array_typing/numpy/#array_typing.numpy.scale","title":"scale","text":"<pre><code>scale(x: ArrayLike, a: float = 0, b: float = 1) -&gt; NDArray\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_scale.py</code> <pre><code>def scale(x: npt.ArrayLike, a: float = 0, b: float = 1) -&gt; npt.NDArray:\n    x: npt.NDArray[...] = tn.as_numpy(x)\n    x = (x - x.min()) / np.ptp(x)\n    x = x * (b - a) + a\n    return x\n</code></pre>"},{"location":"api/array_typing/numpy/_utils/","title":"array_typing.numpy._utils","text":"<p>Functions:</p> <ul> <li> <code>as_dict_of_numpy</code>             \u2013              </li> <li> <code>as_dtype</code>             \u2013              </li> <li> <code>as_numpy</code>             \u2013              </li> <li> <code>is_numpy</code>             \u2013              </li> <li> <code>scale</code>             \u2013              </li> </ul>"},{"location":"api/array_typing/numpy/_utils/#array_typing.numpy._utils.as_dict_of_numpy","title":"as_dict_of_numpy","text":"<pre><code>as_dict_of_numpy(\n    obj: Mapping[str, ArrayLike] | None\n) -&gt; dict[str, ndarray]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_numpy.py</code> <pre><code>def as_dict_of_numpy(obj: Mapping[str, at.ArrayLike] | None) -&gt; dict[str, np.ndarray]:\n    if obj is None:\n        return {}\n    return {k: at.as_numpy(v) for k, v in obj.items()}\n</code></pre>"},{"location":"api/array_typing/numpy/_utils/#array_typing.numpy._utils.as_dtype","title":"as_dtype","text":"<pre><code>as_dtype(x: ArrayLike, dtype: DTypeLike) -&gt; NDArray[...]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_dtype.py</code> <pre><code>def as_dtype(x: npt.ArrayLike, dtype: npt.DTypeLike) -&gt; npt.NDArray[...]:\n    x: npt.NDArray = tn.as_numpy(x)\n    dtype: np.dtype = np.dtype(dtype)\n    if np.issubdtype(x.dtype, dtype):\n        return x\n    if np.isdtype(dtype, \"bool\"):\n        if np.ptp(x) &gt; 0:\n            return x &gt; np.median(x)\n        return x &gt; 0.5\n    if np.isdtype(dtype, \"integral\"):\n        x = np.rint(x)\n    return x.astype(dtype)\n</code></pre>"},{"location":"api/array_typing/numpy/_utils/#array_typing.numpy._utils.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(obj: Any) -&gt; ndarray\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_as_numpy.py</code> <pre><code>def as_numpy(obj: Any) -&gt; np.ndarray:\n    if at.is_numpy(obj):\n        return obj\n    if at.is_torch(obj):\n        return obj.numpy(force=True)\n    return np.asarray(obj)\n</code></pre>"},{"location":"api/array_typing/numpy/_utils/#array_typing.numpy._utils.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_is.py</code> <pre><code>def is_numpy(obj: Any) -&gt; TypeGuard[np.ndarray]:\n    return at.is_instance_named_partial(obj, \"numpy.ndarray\")\n</code></pre>"},{"location":"api/array_typing/numpy/_utils/#array_typing.numpy._utils.scale","title":"scale","text":"<pre><code>scale(x: ArrayLike, a: float = 0, b: float = 1) -&gt; NDArray\n</code></pre> Source code in <code>src/array_typing/numpy/_utils/_scale.py</code> <pre><code>def scale(x: npt.ArrayLike, a: float = 0, b: float = 1) -&gt; npt.NDArray:\n    x: npt.NDArray[...] = tn.as_numpy(x)\n    x = (x - x.min()) / np.ptp(x)\n    x = x * (b - a) + a\n    return x\n</code></pre>"},{"location":"api/array_typing/python/","title":"array_typing.python","text":"<p>Functions:</p> <ul> <li> <code>as_scalar</code>             \u2013              </li> </ul>"},{"location":"api/array_typing/python/#array_typing.python.as_scalar","title":"as_scalar","text":"<pre><code>as_scalar(x: ScalarLike) -&gt; Scalar\n</code></pre> Source code in <code>src/array_typing/python/_cast.py</code> <pre><code>def as_scalar(x: at.ScalarLike) -&gt; at.Scalar:\n    if at.is_jax(x):\n        return x.item()\n    if at.is_numpy(x):\n        return x.item()\n    if at.is_torch(x):\n        return x.item()\n    return x  # pyright: ignore [reportReturnType]\n</code></pre>"},{"location":"api/array_typing/torch/","title":"array_typing.torch","text":"<p>Functions:</p> <ul> <li> <code>is_array_like</code>             \u2013              </li> <li> <code>is_torch</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>ArrayLike</code>           \u2013            </li> <li> <code>B</code>           \u2013            </li> <li> <code>B33</code>           \u2013            </li> <li> <code>B33Like</code>           \u2013            </li> <li> <code>B34</code>           \u2013            </li> <li> <code>B34Like</code>           \u2013            </li> <li> <code>B43</code>           \u2013            </li> <li> <code>B43Like</code>           \u2013            </li> <li> <code>B44</code>           \u2013            </li> <li> <code>B44Like</code>           \u2013            </li> <li> <code>BLike</code>           \u2013            </li> <li> <code>BMN</code>           \u2013            </li> <li> <code>BMNLike</code>           \u2013            </li> <li> <code>BN</code>           \u2013            </li> <li> <code>BN3</code>           \u2013            </li> <li> <code>BN3Like</code>           \u2013            </li> <li> <code>BN4</code>           \u2013            </li> <li> <code>BN4Like</code>           \u2013            </li> <li> <code>BNLike</code>           \u2013            </li> <li> <code>BNN</code>           \u2013            </li> <li> <code>BNNLike</code>           \u2013            </li> <li> <code>F</code>           \u2013            </li> <li> <code>F33</code>           \u2013            </li> <li> <code>F33Like</code>           \u2013            </li> <li> <code>F34</code>           \u2013            </li> <li> <code>F34Like</code>           \u2013            </li> <li> <code>F43</code>           \u2013            </li> <li> <code>F43Like</code>           \u2013            </li> <li> <code>F44</code>           \u2013            </li> <li> <code>F44Like</code>           \u2013            </li> <li> <code>FLike</code>           \u2013            </li> <li> <code>FMN</code>           \u2013            </li> <li> <code>FMNLike</code>           \u2013            </li> <li> <code>FN</code>           \u2013            </li> <li> <code>FN3</code>           \u2013            </li> <li> <code>FN3Like</code>           \u2013            </li> <li> <code>FN4</code>           \u2013            </li> <li> <code>FN4Like</code>           \u2013            </li> <li> <code>FNLike</code>           \u2013            </li> <li> <code>FNN</code>           \u2013            </li> <li> <code>FNNLike</code>           \u2013            </li> <li> <code>I</code>           \u2013            </li> <li> <code>I33</code>           \u2013            </li> <li> <code>I33Like</code>           \u2013            </li> <li> <code>I34</code>           \u2013            </li> <li> <code>I34Like</code>           \u2013            </li> <li> <code>I43</code>           \u2013            </li> <li> <code>I43Like</code>           \u2013            </li> <li> <code>I44</code>           \u2013            </li> <li> <code>I44Like</code>           \u2013            </li> <li> <code>ILike</code>           \u2013            </li> <li> <code>IMN</code>           \u2013            </li> <li> <code>IMNLike</code>           \u2013            </li> <li> <code>IN</code>           \u2013            </li> <li> <code>IN3</code>           \u2013            </li> <li> <code>IN3Like</code>           \u2013            </li> <li> <code>IN4</code>           \u2013            </li> <li> <code>IN4Like</code>           \u2013            </li> <li> <code>INLike</code>           \u2013            </li> <li> <code>INN</code>           \u2013            </li> <li> <code>INNLike</code>           \u2013            </li> </ul>"},{"location":"api/array_typing/torch/#array_typing.torch.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[Tensor, '']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B33","title":"B33  <code>module-attribute</code>","text":"<pre><code>B33 = Bool[Tensor, '3 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B33Like","title":"B33Like  <code>module-attribute</code>","text":"<pre><code>B33Like = Bool[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B34","title":"B34  <code>module-attribute</code>","text":"<pre><code>B34 = Bool[Tensor, '3 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B34Like","title":"B34Like  <code>module-attribute</code>","text":"<pre><code>B34Like = Bool[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B43","title":"B43  <code>module-attribute</code>","text":"<pre><code>B43 = Bool[Tensor, '4 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B43Like","title":"B43Like  <code>module-attribute</code>","text":"<pre><code>B43Like = Bool[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B44","title":"B44  <code>module-attribute</code>","text":"<pre><code>B44 = Bool[Tensor, '4 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.B44Like","title":"B44Like  <code>module-attribute</code>","text":"<pre><code>B44Like = Bool[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BMN","title":"BMN  <code>module-attribute</code>","text":"<pre><code>BMN = Bool[Tensor, 'M N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BMNLike","title":"BMNLike  <code>module-attribute</code>","text":"<pre><code>BMNLike = Bool[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[Tensor, 'N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BN3","title":"BN3  <code>module-attribute</code>","text":"<pre><code>BN3 = Bool[Tensor, 'N 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BN3Like","title":"BN3Like  <code>module-attribute</code>","text":"<pre><code>BN3Like = Bool[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BN4","title":"BN4  <code>module-attribute</code>","text":"<pre><code>BN4 = Bool[Tensor, 'N 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BN4Like","title":"BN4Like  <code>module-attribute</code>","text":"<pre><code>BN4Like = Bool[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BNN","title":"BNN  <code>module-attribute</code>","text":"<pre><code>BNN = Bool[Tensor, 'N N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.BNNLike","title":"BNNLike  <code>module-attribute</code>","text":"<pre><code>BNNLike = Bool[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[Tensor, '']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[Tensor, '3 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[Tensor, '3 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[Tensor, '4 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[Tensor, '4 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[Tensor, 'M N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[Tensor, 'N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[Tensor, 'N 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FN4","title":"FN4  <code>module-attribute</code>","text":"<pre><code>FN4 = Float[Tensor, 'N 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FN4Like","title":"FN4Like  <code>module-attribute</code>","text":"<pre><code>FN4Like = Float[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[Tensor, 'N N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[Tensor, '']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I33","title":"I33  <code>module-attribute</code>","text":"<pre><code>I33 = Integer[Tensor, '3 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I33Like","title":"I33Like  <code>module-attribute</code>","text":"<pre><code>I33Like = Integer[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I34","title":"I34  <code>module-attribute</code>","text":"<pre><code>I34 = Integer[Tensor, '3 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I34Like","title":"I34Like  <code>module-attribute</code>","text":"<pre><code>I34Like = Integer[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I43","title":"I43  <code>module-attribute</code>","text":"<pre><code>I43 = Integer[Tensor, '4 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I43Like","title":"I43Like  <code>module-attribute</code>","text":"<pre><code>I43Like = Integer[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I44","title":"I44  <code>module-attribute</code>","text":"<pre><code>I44 = Integer[Tensor, '4 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.I44Like","title":"I44Like  <code>module-attribute</code>","text":"<pre><code>I44Like = Integer[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IMN","title":"IMN  <code>module-attribute</code>","text":"<pre><code>IMN = Integer[Tensor, 'M N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IMNLike","title":"IMNLike  <code>module-attribute</code>","text":"<pre><code>IMNLike = Integer[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[Tensor, 'N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[Tensor, 'N 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[Tensor, 'N 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.INN","title":"INN  <code>module-attribute</code>","text":"<pre><code>INN = Integer[Tensor, 'N N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.INNLike","title":"INNLike  <code>module-attribute</code>","text":"<pre><code>INNLike = Integer[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/array_like/_utils.py</code> <pre><code>def is_array_like(obj: Any) -&gt; bool:\n    return hasattr(obj, \"__len__\") and not isinstance(obj, str | bytes)\n</code></pre>"},{"location":"api/array_typing/torch/#array_typing.torch.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre> Source code in <code>src/array_typing/torch/_utils.py</code> <pre><code>def is_torch(obj: Any) -&gt; TypeGuard[torch.Tensor]:\n    return at.is_instance_named_partial(obj, \"torch.Tensor\")\n</code></pre>"},{"location":"api/array_typing/typing/","title":"array_typing.typing","text":"<p>Functions:</p> <ul> <li> <code>full_name</code>             \u2013              <p>Returns the fully qualified name of the given object.</p> </li> <li> <code>is_class_named</code>             \u2013              </li> <li> <code>is_class_named_partial</code>             \u2013              </li> <li> <code>is_instance_named</code>             \u2013              </li> <li> <code>is_instance_named_partial</code>             \u2013              </li> <li> <code>is_iterable</code>             \u2013              </li> <li> <code>is_named</code>             \u2013              </li> <li> <code>is_named_partial</code>             \u2013              </li> <li> <code>is_sequence</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>Scalar</code>           \u2013            </li> <li> <code>StrPath</code>           \u2013            </li> </ul>"},{"location":"api/array_typing/typing/#array_typing.typing.Scalar","title":"Scalar  <code>module-attribute</code>","text":"<pre><code>Scalar = bool | int | float\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.StrPath","title":"StrPath  <code>module-attribute</code>","text":"<pre><code>StrPath = str | PathLike[str]\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.full_name","title":"full_name","text":"<pre><code>full_name(obj: Any) -&gt; str\n</code></pre> <p>Returns the fully qualified name of the given object.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>The object whose fully qualified name is to be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The fully qualified name of the object.</p> </li> </ul> Reference <ol> <li>https://stackoverflow.com/a/2020083/18410348</li> </ol> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def full_name(obj: Any) -&gt; str:\n    \"\"\"Returns the fully qualified name of the given object.\n\n    Args:\n        obj: The object whose fully qualified name is to be returned.\n\n    Returns:\n        The fully qualified name of the object.\n\n    Reference:\n        1. &lt;https://stackoverflow.com/a/2020083/18410348&gt;\n    \"\"\"\n    if not isinstance(obj, type):\n        return full_name(type(obj))\n    clazz: type = obj\n    module: str = clazz.__module__\n    if module == \"builtins\":\n        return clazz.__qualname__\n    return clazz.__module__ + \".\" + clazz.__qualname__\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_class_named","title":"is_class_named","text":"<pre><code>is_class_named(\n    cls: type, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_class_named(cls: type, name: str | Sequence[str]) -&gt; bool:\n    return any((full_name(cls) in at.flatten(name)) for cls in cls.__mro__)\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_class_named_partial","title":"is_class_named_partial","text":"<pre><code>is_class_named_partial(\n    cls: type, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_class_named_partial(cls: type, name: str | Sequence[str]) -&gt; bool:\n    for clazz in cls.__mro__:\n        class_parts: list[str] = full_name(clazz).split(\".\")\n        for n in at.flatten(name):\n            name_parts: list[str] = n.split(\".\")\n            if at.is_subsequence(name_parts, class_parts):\n                return True\n    return False\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_instance_named","title":"is_instance_named","text":"<pre><code>is_instance_named(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_instance_named(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    return is_class_named(type(obj), name)\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_instance_named_partial","title":"is_instance_named_partial","text":"<pre><code>is_instance_named_partial(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_instance_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    return is_class_named_partial(type(obj), name)\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_iterable","title":"is_iterable","text":"<pre><code>is_iterable(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Iterable]\n</code></pre> Source code in <code>src/array_typing/typing/_is.py</code> <pre><code>def is_iterable(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Iterable]:\n    return isinstance(obj, Iterable) and not isinstance(obj, base_type)\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_named","title":"is_named","text":"<pre><code>is_named(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_named(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    if isinstance(obj, type):\n        return is_class_named(obj, name)\n    return is_instance_named(obj, name)\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_named_partial","title":"is_named_partial","text":"<pre><code>is_named_partial(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/typing/_name.py</code> <pre><code>def is_named_partial(obj: Any, name: str | Sequence[str]) -&gt; bool:\n    if isinstance(obj, type):\n        return is_class_named_partial(obj, name)\n    return is_instance_named_partial(obj, name)\n</code></pre>"},{"location":"api/array_typing/typing/#array_typing.typing.is_sequence","title":"is_sequence","text":"<pre><code>is_sequence(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Sequence]\n</code></pre> Source code in <code>src/array_typing/typing/_is.py</code> <pre><code>def is_sequence(\n    obj: Any, base_type: tuple[type, ...] = (str, bytes)\n) -&gt; TypeGuard[Sequence]:\n    return isinstance(obj, Sequence) and not isinstance(obj, base_type)\n</code></pre>"},{"location":"api/array_typing/utils/","title":"array_typing.utils","text":"<p>Functions:</p> <ul> <li> <code>flatten</code>             \u2013              </li> <li> <code>is_subsequence</code>             \u2013              </li> </ul>"},{"location":"api/array_typing/utils/#array_typing.utils.flatten","title":"flatten","text":"<pre><code>flatten(\n    iterable: (\n        _T\n        | Iterable[_T]\n        | Iterable[Iterable[_T]]\n        | Iterable\n    ),\n    base_type: tuple[type, ...] = (str, bytes),\n) -&gt; Iterable[_T]\n</code></pre> Source code in <code>src/array_typing/utils/_sequence.py</code> <pre><code>def flatten(\n    iterable: _T | Iterable[_T] | Iterable[Iterable[_T]] | Iterable,\n    base_type: tuple[type, ...] = (str, bytes),\n) -&gt; Iterable[_T]:\n    if not at.is_iterable(iterable, base_type):\n        yield iterable  # pyright: ignore [reportReturnType]\n        return\n\n    for item in iterable:\n        if at.is_iterable(item, base_type):\n            yield from flatten(item)\n        else:\n            yield item\n</code></pre>"},{"location":"api/array_typing/utils/#array_typing.utils.is_subsequence","title":"is_subsequence","text":"<pre><code>is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool\n</code></pre> Source code in <code>src/array_typing/utils/_sequence.py</code> <pre><code>def is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool:\n    i: int = 0\n    j: int = 0\n    while i &lt; len(a) and j &lt; len(b):\n        if a[i] == b[j]:\n            i += 1\n        j += 1\n    return i == len(a)\n</code></pre>"}]}